app/
â”‚â”€â”€ base/                   # Base classes for ViewModels, Activities, Fragments, etc.
â”‚â”€â”€ data/                   # Data Layer (Handles API, Database, Repository)
â”‚   â”‚â”€â”€ api/                # API interfaces (Retrofit, Firebase, etc.)
â”‚   â”‚â”€â”€ local/              # Local database (Room, SharedPreferences)
â”‚   â”‚â”€â”€ model/              # Data models (data classes for API and database)
â”‚   â”‚â”€â”€ remote/             # Remote data source (API calls, Firebase)
â”‚   â”‚â”€â”€ repository/         # Repository pattern (manages data from remote/local)
â”‚â”€â”€ di/                     # Dependency Injection (Hilt/Koin for injecting dependencies)
â”‚â”€â”€ domain/                 # Business Logic Layer (Use Cases)
â”‚â”€â”€ ui/                     # Presentation Layer (Handles UI and State)
â”‚   â”‚â”€â”€ adapter/            # Adapters for RecyclerView or Compose lists
â”‚   â”‚â”€â”€ intent/             # User actions (sealed classes for intents)
â”‚   â”‚â”€â”€ theme/              # UI Themes (Jetpack Compose Material Theme)
â”‚   â”‚   â”‚â”€â”€ color.kt        # Colors for UI theme
â”‚   â”‚   â”‚â”€â”€ Theme.kt        # Jetpack Compose Theme setup
â”‚   â”‚   â”‚â”€â”€ Type.kt         # Typography settings for UI
â”‚   â”‚â”€â”€ view/               # UI screens (Jetpack Compose or XML views)
â”‚   â”‚â”€â”€ viewmodel/          # ViewModels (handles state and business logic)
â”‚   â”‚â”€â”€ viewstate/          # UI state management (sealed classes for state)
â”‚â”€â”€ utils/                  # Utility classes, extensions, helper functions
â”‚â”€â”€ MainActivity.kt         # Main entry point of the app





updated
com.example.speakease/
â”‚â”€â”€ base/                   # Base classes for ViewModels, Activities, Fragments, etc.
â”‚â”€â”€ data/                   # Data Layer (Handles API, Database, Repository)
â”‚   â”‚â”€â”€ api/                # API interfaces (Retrofit, Firebase, etc.)
â”‚   â”‚â”€â”€ local/              # Local database (Room, SharedPreferences)
â”‚   â”‚â”€â”€ model/              # Data models (data classes for API and database)
â”‚   â”‚â”€â”€ remote/             # Remote data source (API calls, Firebase)
â”‚   â”‚â”€â”€ repository/         # Repository pattern (manages data from remote/local)
â”‚â”€â”€ di/                     # Dependency Injection (Hilt/Koin for injecting dependencies)
â”‚â”€â”€ domain/                 # Business Logic Layer (Use Cases)
â”‚â”€â”€ ui/                     # Presentation Layer (Handles UI and State)
â”‚   â”‚â”€â”€ adapter/            # Adapters for RecyclerView or Compose lists
â”‚   â”‚â”€â”€ intent/             # User actions (sealed classes for intents)
â”‚   â”‚â”€â”€ theme/              # UI Themes (Jetpack Compose Material Theme)
â”‚   â”‚   â”‚â”€â”€ color.kt        # Colors for UI theme
â”‚   â”‚   â”‚â”€â”€ Theme.kt        # Jetpack Compose Theme setup
â”‚   â”‚   â”‚â”€â”€ Type.kt         # Typography settings for UI
â”‚   â”‚â”€â”€ view/               # UI screens (Jetpack Compose or XML views)
|   |â”€â”€ AdScreen            # Ad Banner
â”‚   â”‚   â”‚â”€â”€ dashboard/      # Dashboard-related UI components
â”‚   â”‚   â”‚   â”‚â”€â”€ DashboardPage.kt
|   |- -Exercise            #Exercise
|   |   |--A1Exercise /       #A1 exercise question
|   |   |   |-- exerciseA1View.kt
|   |   |-- A2Exercise/
â”‚   â”‚   â”‚â”€â”€ home/           # Home-related UI components
â”‚   â”‚   â”‚   â”‚â”€â”€ HomePage.kt
â”‚   â”‚   â”‚â”€â”€ login/          # Login-related UI components
â”‚   â”‚   â”‚   â”‚â”€â”€ LoginPage.kt
â”‚   â”‚   â”‚   â”‚â”€â”€ LoginScreen.kt
â”‚   â”‚   â”‚â”€â”€ signup/         # Signup-related UI components
â”‚   â”‚   â”‚   â”‚â”€â”€ SignUpPages.kt
â”‚   â”‚â”€â”€ viewmodel/          # ViewModels (handles state and business logic)
â”‚   â”‚   â”‚â”€â”€ AuthViewModel.kt
â”‚   â”‚   â”‚â”€â”€ AuthViewModelFactory.kt
â”‚   â”‚â”€â”€ viewstate/          # UI state management (sealed classes for state)
â”‚â”€â”€ utils/                  # Utility classes, extensions, helper functions
â”‚â”€â”€ MainActivity.kt         # Main entry point of the app
â”‚â”€â”€ Navigation.kt           # Navigation setup for the app






Detailed Folder Explanation:
ðŸ“‚ base/
Stores base classes used across the app, such as:
BaseViewModel.kt (Base class for ViewModels)
BaseActivity.kt (Common logic for activities)


ðŸ“‚ data/ (Handles data fetching, storage, and management)
Responsible for fetching and storing data from APIs, databases, or local sources.

â”‚â”€â”€ data/
â”‚   â”‚â”€â”€ api/                # API interfaces (Retrofit, Firebase)
â”‚   â”‚â”€â”€ local/              # Local database (Room, SharedPreferences)
â”‚   â”‚â”€â”€ model/              # Data models (data classes)
â”‚   â”‚â”€â”€ remote/             # Remote data sources (API calls, Firebase)
â”‚   â”‚â”€â”€ repository/         # Repository pattern (fetches from remote/local)




api/ â†’ Contains Retrofit API interfaces or Firebase implementations.
local/ â†’ Manages Room database and SharedPreferences.
model/ â†’ Defines data classes for API responses or database entities.
remote/ â†’ Fetches data from remote APIs.
repository/ â†’ Acts as a single source of truth for fetching data from API or local DB.



ðŸ“‚ di/ (Dependency Injection)
Handles dependency injection using Hilt or Koin.
Provides dependencies such as ViewModels, repositories, and API services.




ðŸ“‚ domain/ (Business Logic Layer)
Contains Use Cases that separate business logic from UI.



ðŸ“‚ ui/ (Handles UI & State Management)

â”‚â”€â”€ ui/
â”‚   â”‚â”€â”€ adapter/            # RecyclerView adapters, Compose lists
â”‚   â”‚â”€â”€ intent/             # User actions (sealed classes)
â”‚   â”‚â”€â”€ theme/              # UI themes (Jetpack Compose Material Theme)
â”‚   â”‚   â”‚â”€â”€ color.kt        # Colors for UI theme
â”‚   â”‚   â”‚â”€â”€ Theme.kt        # Jetpack Compose Theme setup
â”‚   â”‚   â”‚â”€â”€ Type.kt         # Typography settings
â”‚   â”‚â”€â”€ view/               # UI screens (Jetpack Compose)
â”‚   â”‚â”€â”€ viewmodel/          # ViewModels (handles state)
â”‚   â”‚â”€â”€ viewstate/          # UI state management (sealed classes)



ðŸ“‚ utils/ (Utility Classes)
Contains helper functions, extensions, and reusable utilities.




ðŸ“‚ MainActivity.kt
Entry point of the app.
Observes ViewModel state and updates UI accordingly.




âœ… Conclusion
Your MVI-based project structure is well-optimized for Jetpack Compose. It ensures: âœ” Separation of Concerns (SoC)
âœ” Unidirectional Data Flow (UDF)
âœ” Scalability & Maintainability





â–¶ Compose Basics Codelab â€“ Hands-on practice                                    https://developer.android.com/codelabs/jetpack-compose-basics#0
â–¶ State in Jetpack Compose â€“ Learn state management                             https://developer.android.com/codelabs/jetpack-compose-state#0




























/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# <img src="docs/images/badge.png" alt="JetAds" width="64"/> JetAds

[![Maven Central](https://img.shields.io/maven-central/v/io.github.pen-drive/jet-ads)](https://search.maven.org/artifact/io.github.pen-drive/jet-ads)
[![License](https://img.shields.io/github/license/karacca/beetle)](https://www.apache.org/licenses/LICENSE-2.0)
[![Android API](https://img.shields.io/badge/api-21%2B-green)](https://android-arsenal.com/api?level=21)


## Easy Ads for Jetpack Compose

Easily integrate and manage ads in your Jetpack Compose apps with a library that simplifies AdMob implementation. Itâ€™s like 'Plug and Earn!'

> [!CAUTION]
> If you're not using test IDs, remember to add your device/emulator as a [test device](https://developers.google.com/admob/android/test-ads#enable_test_devices).

## Installation

The easiest way to start using JetAds is to add it as a Gradle dependency in your app module's `build.gradle` file.

```kotlin
implementation("io.github.pen-drive:jet-ads:<version>")
```

> [!TIP]
> There's no need to add the [AdMob/Google Ads](https://developers.google.com/admob/android/quick-start) dependency, as it's already included in your project through transitive dependency.

### Add AdMob meta-data

After adding the library, add the following meta-data to your `AndroidManifest.xml` file:

```xml
<manifest>
  <application>
    <!-- Sample AdMob app ID: ca-app-pub-3940256099942544~3347511713 -->
    <meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="ca-app-pub-xxxxxxxxxxxxxxxx~yyyyyyyyyy"/>
  </application>
</manifest>
```
> [!TIP]
> Change to your app's APPLICATION_ID! The ID above is a test ID provided by [AdMob](https://developers.google.com/admob/android/quick-start#:~:text=%3Cmanifest%3E%0A%20%20%3Capplication%3E%0A%20%20%20%20%3C!%2D%2D%20Sample%20AdMob%20app%20ID%3A%20ca%2Dapp%2Dpub%2D3940256099942544~3347511713%20%2D%2D%3E%0A%20%20%20%20%3Cmeta%2Ddata%0A%20%20%20%20%20%20%20%20android%3Aname%3D%22com.google.android.gms.ads.APPLICATION_ID%22%0A%20%20%20%20%20%20%20%20android%3Avalue%3D%22ca%2Dapp%2Dpub%2Dxxxxxxxxxxxxxxxx~yyyyyyyyyy%22/%3E%0A%20%20%3C/application%3E%0A%3C/manifest%3E).

### Initialize the ads

```kotlin
class MainActivity : ComponentActivity(),
    AdsInitializer by AdsInitializeFactory.admobInitializer() // <- use delegation ,
{

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        initializeAds() // Initialize the ads

        setContent {
            //Compose content
        }
    }
}
```

### <img src="docs/images/banner.svg" alt="Banner Ad" width="64" height="64" style="vertical-align: middle; margin-right: 10px;"/><span style="display: inline-block; vertical-align: middle; line-height: 64px;">Banner</span>

To add an adaptive banner, simply place this composable where you want to show it:

```kotlin
AdaptiveBanner("YOUR_BANNER_ID")
```

To position the banner at the bottom of the screen:

> [!TIP]
> Banners are typically positioned at the bottom of the screen. To do this, you can:
> ```kotlin
>   Scaffold(
>     modifier = Modifier.fillMaxSize(),
>     bottomBar = { AdaptiveBanner(AdMobTestIds.ADAPTIVE_BANNER) }) { innerPadding ->
>         //Compose content
>     }
> ```

### <img src="docs/images/interstitial.svg" alt="Interstitial Ad" width="64" height="64" style="vertical-align: middle; margin-right: 10px;"/><span style="display: inline-block; vertical-align: middle; line-height: 64px;">Interstitials</span>

Call this composable at some point before showing the Interstitial:

```kotlin
LoadInterstitial("YOUR_INTERSTITIAL_ID")
```

To show the Interstitial:

```kotlin
val interstitialsController: InterstitialsController = InterstitialsControllerFactory.admobController()
interstitialsController.show("PREVIOUSLY_LOADED_INTERSTITIAL_ID", activityContext)
```

### <img src="docs/images/rewarded.svg" alt="Rewarded Ad" width="64" height="64" style="vertical-align: middle; margin-right: 10px;"/><span style="display: inline-block; vertical-align: middle; line-height: 64px;">Rewardeds</span>

Call this composable at some point before showing the Rewarded:

```kotlin
LoadRewarded("YOUR_REWARDED_ID")
```

To show the Rewarded:

```kotlin
val rewardsController: RewardsController = RewardedControllerFactory.admobController()
rewardsController.show("PREVIOUSLY_LOADED_REWARDED_ID", activity) { rewardedItem ->
    // Logic to handle the reward
}
```

## <img src="docs/images/appOpen.svg" alt="App Open Ad" width="64" height="64" style="vertical-align: middle; margin-right: 10px;"/><span style="display: inline-block; vertical-align: middle; line-height: 64px;">Open Ads</span>

Add OpenAdSetup to your activity and use the corresponding delegation!

Method to show ads whenever the app enters the foreground:

```kotlin
class MainActivity : ComponentActivity(),
    AdsInitializer by AdsInitializeFactory.admobInitializer(),
    AppOpenAdManager by AppOpenAdManagerFactory.admobAppOpenAdManager() // <-- for app open ads
{
    private var keepSplashScreen = true

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        initializeAds()

        registerAppOpenAd("YOUR_APP_OPEN_ID")  // <-- for app open ads

        setContent {
            //Compose content
        }
    }
}
```

Method to show ads whenever the app enters the foreground, and on [cold start](https://developers.google.com/admob/android/app-open#coldstart), i.e., the first time the app starts. This is the recommended method:

```kotlin
class MainActivity : ComponentActivity(),
    AdsInitializer by AdsInitializeFactory.admobInitializer(),
    AppOpenAdManager by AppOpenAdManagerFactory.admobAppOpenAdManager()) // <-- for app open ads
{
    private var keepSplashScreen = true

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        initializeAds()

        val splash = installSplashScreen()
        splash.setKeepOnScreenCondition {
            keepSplashScreen
        }

        registerAppOpenAdForColdStart(AdMobTestIds.APP_OPEN, onCloseSplashScreen = {
            keepSplashScreen = false
        }) // <-- for app open ads

        setContent {
            //Compose content
        }
    }
}
```
> [!CAUTION]
> The **Show on [cold start](https://developers.google.com/admob/android/app-open#coldstart)** feature was specifically designed to work **only** with the [SplashScreen API](https://www.youtube.com/watch?v=abthd7DOfdw).
> Using a splash screen as a regular activity may not function as expected.
>
> Note: This behavior may change in future versions.



## Test IDs

The library provides the `AdMobTestIds` object to access all [AdMob test IDs](https://developers.google.com/admob/android/test-ads):

```kotlin
object AdMobTestIds {
  const val APP_OPEN = "ca-app-pub-3940256099942544/9257395921"
  const val ADAPTIVE_BANNER = "ca-app-pub-3940256099942544/9214589741"
  const val INTERSTITIAL = "ca-app-pub-3940256099942544/1033173712"
  const val REWARDED = "ca-app-pub-3940256099942544/5224354917"
  const val NATIVE = "ca-app-pub-3940256099942544/2247696110"
  const val FIXED_SIZE_BANNER = "ca-app-pub-3940256099942544/6300978111"
  const val REWARDED_INTERSTITIAL = "ca-app-pub-3940256099942544/5354046379"
  const val NATIVE_VIDEO = "ca-app-pub-3940256099942544/1044960115"
}
```

> [!TIP]
> Take a look at the app module in this repository; there you can see more advanced ways to use this library.



## Logs

This library provides logs only in debug mode. It logs your ad IDs as tags, such as: 'ca-app-pub-3940256099942544/9257395921', allowing you to filter Logcat to view logs specific to each ad.

## Upcoming features (possibly)

- Native ads
- Mediation

## Contributing

Contributions of new features or bug fixes are always welcome. Please submit a new issue or pull request at any time.

When contributing, keep in mind:

- The library's philosophy is to be easy to use, always hiding complex implementations from users.
- Contributors must follow the 'Plug and Earn' principle, ensuring that this library remains simple and easy to use for developers.